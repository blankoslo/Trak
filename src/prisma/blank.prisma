generator client {
  provider = "prisma-client-js"
  output   = "./generated/blank"
}

datasource db {
  provider = "postgresql"
  url      = env("BLANK_DB_URL")
}

model customers {
  id       String     @id
  name     String     @unique(map: "unique_customer_name")
  projects projects[]
}

model employee_role {
  id          String             @id @default(dbgenerated("uuid_generate_v4()"))
  employee_id Int
  role_type   employee_role_type
  created     DateTime?          @default(now()) @db.Date
  employees   employees          @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employees {
  id                         Int             @id @default(dbgenerated("nextval('employees_id_seq'::regclass)"))
  first_name                 String
  last_name                  String
  title                      String?
  phone                      String
  email                      String          @unique(map: "unique_employee_email")
  gender                     gender
  birth_date                 DateTime        @db.Date
  date_of_employment         DateTime?       @db.Date
  termination_date           DateTime?       @db.Date
  emergency_contact_name     String?
  emergency_contact_phone    String?
  emergency_contact_relation String?
  address                    String?
  postal_code                String?
  city                       String?
  image_url                  String?
  has_permanent_position     Boolean?        @default(true)
  emoji                      String?         @db.VarChar(10)
  role                       String?
  bio                        String?
  hr_manager                 Int?
  employees                  employees?      @relation("employeesToemployees_hr_manager", fields: [hr_manager], references: [id], onUpdate: NoAction)
  employee_role              employee_role[]
  other_employees            employees[]     @relation("employeesToemployees_hr_manager")
  projects                   projects[]
  staffing                   staffing[]
}

model projects {
  id          String      @id
  name        String
  billable    time_status
  customer    String
  responsible Int?
  active      Boolean     @default(true)
  deductable  Boolean?    @default(false)
  customers   customers   @relation(fields: [customer], references: [id], onDelete: NoAction)
  employees   employees?  @relation(fields: [responsible], references: [id], onDelete: NoAction, map: "projects_employees_fkey")
  staffing    staffing[]
}

model staffing {
  employee  Int
  project   String
  date      DateTime  @db.Date
  employees employees @relation(fields: [employee], references: [id], onDelete: NoAction)
  projects  projects  @relation(fields: [project], references: [id], onDelete: NoAction)

  @@id([employee, date])
}

enum employee_role_type {
  admin
}

enum expense_type {
  subcontractor
  other
}

enum gender {
  male
  female
  other
}

enum invoice_status {
  not_done
  not_ok
  ok
  sent
}

enum ranked_matchup_result {
  WIN
  LOSS
  TIE
}

enum time_status {
  billable
  nonbillable
  unavailable
}

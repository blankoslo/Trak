generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("TRAK_DB_URL")
}

model Comment {
  id                String       @id @default(uuid())
  text              String
  createdAt         DateTime     @default(now())
  createdByEmployee Employee     @relation(fields: [createdById], references: [id])
  createdById       Int
  employeeTask      EmployeeTask @relation(fields: [employeeTaskId], references: [id])
  employeeTaskId    String
}

model Employee {
  id                      Int               @id
  email                   String            @unique
  professionId            Int
  firstName               String
  lastName                String
  birthDate               DateTime
  dateOfEmployment        DateTime?
  gender                  gender?
  terminationDate         DateTime?
  imageUrl                String?
  hrManagerId             Int?
  hrManager               Employee?         @relation("EmployeeToEmployee", fields: [hrManagerId], references: [id])
  profession              Profession        @relation(fields: [professionId], references: [id])
  employees               Employee[]        @relation("EmployeeToEmployee")
  employeeSettings        EmployeeSettings? @relation("settings")
  completedTasks          EmployeeTask[]    @relation("completed_by")
  employeeTask            EmployeeTask[]    @relation("tasks")
  responsibleEmployeeTask EmployeeTask[]    @relation("responsible_employee_tasks")
  notifications           Notification[]    @relation("employee")
  responsibleTask         Task[]            @relation("responsible_tasks")
  Notification            Notification[]    @relation("created_by_employee")
  comments                Comment[]
}

model EmployeeSettings {
  employeeId           Int                @id
  slack                Boolean            @default(true)
  notificationSettings NotificationType[]
  employee             Employee           @relation("settings", fields: [employeeId], references: [id])
}

model EmployeeTask {
  id            String    @id @default(uuid())
  taskId        String
  completed     Boolean   @default(false)
  employeeId    Int
  responsibleId Int
  dueDate       DateTime
  completedDate DateTime?
  completedById Int?
  completedBy   Employee? @relation("completed_by", fields: [completedById], references: [id])
  employee      Employee  @relation("tasks", fields: [employeeId], references: [id])
  responsible   Employee  @relation("responsible_employee_tasks", fields: [responsibleId], references: [id])
  task          Task      @relation(fields: [taskId], references: [id])
  comments      Comment[]
}

model Notification {
  id                String    @id @default(uuid())
  employeeId        Int
  createdBy         Int?
  createdAt         DateTime  @default(now())
  read              Boolean   @default(false)
  description       String
  employee          Employee  @relation("employee", fields: [employeeId], references: [id])
  createdByEmployee Employee? @relation("created_by_employee", fields: [createdBy], references: [id])
}

model Phase {
  id                String          @id @default(uuid())
  title             String
  processTemplateId String
  createdAt         DateTime        @default(now())
  dueDateDayOffset  Int?
  dueDate           DateTime?
  active            Boolean         @default(true)
  processTemplate   ProcessTemplate @relation(fields: [processTemplateId], references: [slug])
  tasks             Task[]
}

model ProcessTemplate {
  title  String
  slug   String  @id
  phases Phase[]
}

model Profession {
  id       Int        @id @default(autoincrement())
  title    String     @unique
  employee Employee[]
  tasks    Task[]
}

model Tag {
  id    String @id @default(uuid())
  title String @unique
  tasks Task[]
}

model Task {
  id               String         @id @default(uuid())
  title            String
  description      String?
  link             String?
  global           Boolean        @default(true)
  phaseId          String?
  responsibleId    Int?
  createdAt        DateTime       @default(now())
  active           Boolean        @default(true)
  dueDateDayOffset Int?
  dueDate          DateTime?
  phase            Phase?         @relation(fields: [phaseId], references: [id])
  responsible      Employee?      @relation("responsible_tasks", fields: [responsibleId], references: [id])
  employeeTask     EmployeeTask[]
  professions      Profession[]
  tags             Tag[]
}

enum NotificationType {
  DELEGATE
  DEADLINE
  WEEK_BEFORE_DEADLINE
  TERMINATION
  HIRED
}

enum gender {
  male
  female
  other
}
